??par()
print.trellis()
??print.trellis()
??trellis.par.set()
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, smooth = "loess")
setwd(D:/data science course complete/Exploraty data analysis/project1)
getwd()
hld_data<-read.table(file.choose(),sep=";", Header=T)
hld_data<-read.table(file.choose(),header=T,sep=";")
hld_data<-read.csv(file.choose(),header=T)
head(hld_data)
setwd("D:/data science course complete/Exploraty data analysis/project1")
setwd("D:/data science course complete/Exploraty data analysis/project1")
hld_data=read.csv("sorted_data.csv")
#saving the plot with the appropriate name
png(filename='plot11.png')
#creating the plot
with(hld_data,hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="orange",main='Global Active Power'))
plot1<-hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="orange",main='Global Active Power')
dev.off()
View(hld_data)
View(hld_data)
str(hld_data)
png(filename='plot11.png')
#saving the plot with the appropriate name
png(filename='plot11.png')
#creating the plot
with(hld_data,hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="orange",main='Global Active Power'))
plot11<-hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="orange",main='Global Active Power')
dev.off()
hld_data<-transform(hld_data,Global_active_power= numeric(Global_active_power) )
head(hld_data)
hld_data<-read.csv(file.choose(),header=F)
head(hld_data)
str(hld_data)
View(hld_data)
View(hld_data)
View(hld_data)
View(hld_data)
rm hld_data
rm (hld_data)
hld_data<-read.csv(file.choose(),header=T)
rm (hld_data)
hld_data<-read.csv2(file.choose(), header = TRUE, sep = ";")
str(hld_data)
hld_data<-transform(hld_data,Global_active_power= numeric(Global_active_power) )
setwd("D:/data science course complete/Exploraty data analysis/project1")
hld_data<-read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=FALSE, stringsAsFactors=FALSE) #FILE IS READ HERE
str(hld_data)
#saving the plot with the appropriate name
png(filename='plot11.png')
#creating the plot
with(hld_data,hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="orange",main='Global Active Power'))
plot11<-hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="orange",main='Global Active Power')
dev.off()
setwd("D:/data science course complete/Exploraty data analysis/project1")
hld_data<-read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=FALSE, stringsAsFactors=FALSE) #FILE IS READ HERE
str(hld_data)
#saving the plot with the appropriate name
png(filename='plot11.png')
#creating the plot
with(hld_data,hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="orange",main='Global Active Power'))
plot11<-hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="orange",main='Global Active Power')
dev.off()
dev()
dev.off()
dev.off()
#saving the plot with the appropriate name
png(filename='plot1.png')
#creating the plot
with(hld_data,hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="Green",main='Global Active Power'))
plot1<-hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="Green",main='Global Active Power')
dev.off()
#saving the plot with the appropriate name
png(filename='plot1.png')
#creating the plot
with(hld_data,hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="green",main='Global Active Power'))
plot1<-hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="green",main='Global Active Power')
dev.off()
#saving the plot with the appropriate name
png(filename='plot1.png')
#creating the plot
with(hld_data,hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",main='Global Active Power'))
plot1<-hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",main='Global Active Power')
dev.off()
hld_data<-read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=FALSE, stringsAsFactors=FALSE) #FILE IS READ HERE
str(hld_data)
#saving the plot with the appropriate name
png(filename='plot1.png')
#creating the plot
with(hld_data,hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",main='Global Active Power'))
plot1<-hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",main='Global Active Power')
dev.off()
#saving the plot with the appropriate name
png(filename='plot1.png')
#creating the plot
with(hld_data,hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="green",main='Global Active Power'))
plot1<-hist(hld_data$Global_active_power,breaks=11,xlab="Global Active Power(kilowatts)",col="green",main='Global Active Power')
dev.off()
#Setting date and time to English
Sys.setlocale("LC_TIME", "English")
#generate timeline from the Date + Time attributes, we can then use it as normal time
hld_dat$Timeline<-NA
hld_dat$Timeline <- strptime(paste(hld_dat$Date, hld_dat$Time), format = "%d/%m/%Y %H:%M:%S")
png(filename='plot2.png')
with(hld_dat,plot(Timeline,Global_active_power,ylab='Global Active Power (kilowatts)',xlab="Timeline",type='l'))
title(main="Plot 2")
dev.off()
Sys.setlocale("LC_TIME", "English")
#generate timeline from the Date + Time attributes, we can then use it as normal time
hld_dat$Timeline<-NA
hld_dat$Timeline <- strptime(paste(hld_dat$Date, hld_dat$Time), format = "%d/%m/%Y %H:%M:%S")
png(filename='plot2.png')
with(hld_dat,plot(Timeline,Global_active_power,ylab='Global Active Power (kilowatts)',xlab="Timeline",type='l'))
title(main="Plot 2")
dev.off()
#Setting date and time to English
Sys.setlocale("LC_TIME", "English")
#generate timeline from the Date + Time attributes, we can then use it as normal time
hld_data$Timeline<-NA
hld_data$Timeline <- strptime(paste(hld_data$Date, hld_data$Time), format = "%d/%m/%Y %H:%M:%S")
png(filename='plot2.png')
with(hld_data,plot(Timeline,Global_active_power,ylab='Global Active Power (kilowatts)',xlab="Timeline",type='l'))
title(main="Plot 2")
dev.off()
with(hld_dat,plot(Timeline,Global_active_power,ylab='Global Active Power (kilowatts)',xlab="Timeline",type='l'))
hld_data$Date <- as.Date(hld_data$Date, format="%d/%m/%Y") #DATE IS CONVERTED HERE
#*****************************************************************************
#We need to subset the data in a way that we only select data for the 2 days required in the project
hld_dataSample <- subset(hld_data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))  # HERE WE DO THE SAMPLING FROM THE MAIN DATAFRAME
rm(hld_data) # GOOD PRACTICE IS TO REMOVE WHATEVER IS NOT IN USE FROM MEMORY, IN THIS CASE UNLOAD THE ORIGINAL DATAFRAME...GOOD FOR PERFORMANCE.
#*****************************************************************************
#A column with Date/Times is generated
DateTime <- paste(as.Date(hld_dataSample$Date), hld_dataSample$Time) # A vector is created usign Date and Time from the DataFrame
hld_dataSample$DateTime <- as.POSIXct(DateTime) # The converted DateTime is added to the original DataFrame with the proper format.  This is used widely in Plot 2, 3 and 4
#*****************************************************************************
#Plotting the time based Plot
plot(hld_dataSample$Global_active_power~hld_dataSample$DateTime, ylab="Global Active Power (kilowatts)", xlab="", type="l")
#*****************************************************************************
#Save the time based Plot to a file
dev.copy(png, file="plot2.png", height=480, width=480)
dev.off()
hld_data<-read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=FALSE, stringsAsFactors=FALSE) #FILE IS READ HERE
str(hld_data)
#Need to convert the column date to date format
hld_data$Date <- as.Date(hld_data$Date, format="%d/%m/%Y") #DATE IS CONVERTED HERE
# Need to subset the data in a way that we only select data for the 2 days required in the project
hld_dataSample <- subset(hld_data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
# HERE WE DO THE SAMPLING FROM THE MAIN DATAFRAME
#A column with Date/Times is generated
DateTime <- paste(as.Date(hld_dataSample$Date), hld_dataSample$Time) # A vector is created usign Date and Time from the DataFrame
hld_dataSample$DateTime <- as.POSIXct(DateTime) # The converted DateTime is added to the original DataFrame with the proper format.  This is used widely in Plot 2, 3 and 4
#Plotting the three lines plots into a single Plot
with(hld_dataSample, {
plot(Sub_metering_1~DateTime, type="l",
ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
})
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
#Save the time based Plot to a file
dev.copy(png, file="plot3.png", height=480, width=480)
dev.off()
hld_data<-read.csv("household_power_consumption.txt", header=T, sep=';', na.strings="?", nrows=2075259, check.names=FALSE, stringsAsFactors=FALSE) #FILE IS READ HERE
str(hld_data)
#Need to convert the column date to date format
hld_data$Date <- as.Date(hld_data$Date, format="%d/%m/%Y") #DATE IS CONVERTED HERE
# need to subset the data in a way that we only select data for the 2 days required in the project
hld_dataSample <- subset(hld_data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))  # DOING THE SAMPLING FROM THE MAIN DATAFRAME
#A column with Date/Times is generated
DateTime <- paste(as.Date(hld_dataSample$Date), hld_dataSample$Time) # A vector is created usign Date and Time from the DataFrame
hld_dataSample$DateTime <- as.POSIXct(DateTime) # The converted DateTime is added to the original DataFrame with the proper format.  This is used widely in Plot 2, 3 and 4
#Plotting the plots in same plot window
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(hld_dataSample, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage", xlab="datetime")
plot(Sub_metering_1~DateTime, type="l",
ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global_reactive_power",xlab="datetime")
})
#Save the time based Plot to a file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
source('D:/data science course complete/Exploraty data analysis/project1/plot4.R')
source('D:/data science course complete/Exploraty data analysis/project1/plot4.R')
#=======================================================================
#Need to convert the column date to date format
hld_data$Date <- as.Date(hld_data$Date, format="%d/%m/%Y") #DATE IS CONVERTED HERE
#=======================================================================
#subseting the data for selected days required in the project
hld_dataSample <- subset(hld_data, subset=(Date >= "2007-02-01" & Date <= "2007-02-02"))
# SAMPLING FROM THE MAIN DATAFRAME
#=======================================================================
#A column with Date/Times is generated
DateTime <- paste(as.Date(hld_dataSample$Date), hld_dataSample$Time) # A vector is created usign Date and Time from the DataFrame
hld_dataSample$DateTime <- as.POSIXct(DateTime) # The converted DateTime is added to the original DataFrame with the proper format.  This is used widely in Plot 2, 3 and 4
#=======================================================================
#Plotting the plots in same plot window
par(mfrow=c(2,2), mar=c(4,4,2,1), oma=c(0,0,2,0))
with(hld_dataSample, {
plot(Global_active_power~DateTime, type="l",
ylab="Global Active Power", xlab="")
plot(Voltage~DateTime, type="l",
ylab="Voltage", xlab="datetime")
plot(Sub_metering_1~DateTime, type="l",
ylab="Energy sub metering", xlab="")
lines(Sub_metering_2~DateTime,col='Red')
lines(Sub_metering_3~DateTime,col='Blue')
legend("topright", col=c("black", "red", "blue"), lty=1, lwd=2, bty="n",
legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(Global_reactive_power~DateTime, type="l",
ylab="Global_reactive_power",xlab="datetime")
})
#Save the time based Plot to a file
dev.copy(png, file="plot4.png", height=480, width=480)
dev.off()
source('D:/data science course complete/Exploraty data analysis/project1/plot4.R')
source('D:/data science course complete/Exploraty data analysis/project1/plot4.R')
source('D:/data science course complete/Exploraty data analysis/project1/plot4.R')
getwd()
setwd("D:/data science course complete/Exploraty data analysis/project1")
getwd()
setwd("D:/data science course complete/Exploraty data analysis/project1")
library(plyr)
# Load RDS
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
NEI <- readRDS("summarySCC_PM25.rds")
setwd("D:/data science course complete/Exploraty data analysis/project2")
NEI <- readRDS("summarySCC_PM25.rds")
str(NEI)
#summary
data <- tapply(NEI$Emissions, NEI$year, sum)
str(data)
png("plot1.png")
barplot(data, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Total US"~ PM[2.5] ~ "Emissions by Year"), col="orange")
dev.off()
head(data)
#Plotting the data
png("plot1.png")
barplot(data/1000, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions in '000 tons"),
main=expression("Total US"~ PM[2.5] ~ "Emissions by Year"), col="orange")
dev.off()
setwd("D:/data science course complete/Exploraty data analysis/project2")
# Load RDS
NEI <- readRDS("summarySCC_PM25.rds")
str(NEI)
baltimore <- subset(NEI, NEI$fips == "24510")
baltimoreSum <- tapply(baltimore$Emissions, baltimore$year, sum)
head(bbaltimoreSum)
head(baltimoreSum)
#Ploting the bar graph for baltimore
png("plot2.png")
barplot(baltimoreSum , xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Total Baltimore"~ PM[2.5] ~ "Emissions by Year"),
col="yellow")
dev.off()
baltimore <- subset(NEI, NEI$fips == "24510")
baltimore$year <- as.factor(baltimore$year)
baltimore$type <- as.factor(baltimore$type)
png("plot3.png")
plot3 <- ggplot(baltimore, aes(year, Emissions))
plot3 <- plot3 + geom_bar(stat="identity")
plot3 <- plot3 + labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
plot3 <- plot3 + labs(main=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
plot3 <- plot3 + facet_grid(. ~ type)
plot3
dev.off()
png("plot3.png")
plot3 <- ggplot(baltimore, aes(year, Emissions))
plot3 <- plot3 + geom_bar(stat="identity")
plot3 <- plot3 + labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
plot3 <- plot3 + labs(title=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
plot3 <- plot3 + facet_grid(. ~ type)
plot3
dev.off()
str(NEI)
STR(bultimore)
str(bultimore)
str(baltimore)
png("plot3.png")
plot3 <- ggplot(baltimore, aes(year, Emissions))
plot3 <- plot3 + geom_bar(stat="identity")
plot3 <- plot3 + labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
plot3 <- plot3 + labs(title=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
plot3 <- plot3 + facet_grid(. ~ type)
#plot3
dev.off()
# Plotting the bargraph by adding layer
png("plot3.png")
plot3 <- ggplot(baltimore, aes(year, Emissions))
+ geom_bar(stat="identity")
+ labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
+ labs(title=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
+ facet_grid(. ~ type)
plot3
dev.off()
# Plotting the bargraph by adding layer
png("plot3.png")
plot3 <- ggplot(baltimore, aes(year, Emissions))
plot3 <- plot3 + geom_bar(stat="identity")
plot3 <- plot3 + labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
plot3 <- plot3 + labs(title=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
plot3 <- plot3 + facet_grid(. ~ type)
plot3
dev.off()
png("plot3.png")
plot3 <- ggplot(baltimore, aes(col=year, Emissions))
plot3 <- plot3 + geom_bar(stat="identity")
plot3 <- plot3 + labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
plot3 <- plot3 + labs(title=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
plot3 <- plot3 + facet_grid(. ~ type)
plot3
dev.off()
png("plot3.png")
plot3 <- ggplot(baltimore, aes(color=year, Emissions))
plot3 <- plot3 + geom_bar(stat="identity")
plot3 <- plot3 + labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
plot3 <- plot3 + labs(title=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
plot3 <- plot3 + facet_grid(. ~ type)
plot3
dev.off()
png("plot3.png")
plot3 <- ggplot(baltimore, aes((color=year), Emissions))
plot3 <- plot3 + geom_bar(stat="identity")
plot3 <- plot3 + labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
plot3 <- plot3 + labs(title=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
plot3 <- plot3 + facet_grid(. ~ type)
plot3
dev.off()
# Plotting the bargraph by adding layer
png("plot3.png")
plot3 <- ggplot(baltimore, aes(year,(color=Emissions))
plot3 <- plot3 + geom_bar(stat="identity")
plot3 <- plot3 + labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
plot3 <- plot3 + labs(title=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
plot3 <- plot3 + facet_grid(. ~ type)
plot3
dev.off()
png("plot3.png")
plot3 <- ggplot(baltimore, aes(year,Emissions)
plot3 <- plot3 + geom_bar(stat="identity")
plot3 <- plot3 + labs(y=expression(~ PM[2.5] ~ "Emissions (tons)"))
plot3 <- plot3 + labs(title=expression("Total Baltimore" ~ PM[2.5] ~ "Emissions by Year and Type"))
plot3 <- plot3 + facet_grid(. ~ type)
plot3
dev.off()
SCC <- readRDS("Source_Classification_Code.rds")
str(SCC)
str(SCC)
nums <- subset(SCC$SCC, grepl("[Cc]oal", SCC$Short.Name))
nums
coal <- subset(NEI, NEI$SCC %in% nums)
coal
coal(1:100)
coal(100)
coal <- subset(NEI, NEI$SCC %in% nums)
coal(100)
coal
head(coal)
data <- tapply(coal$Emissions, coal$year, sum)
data
head(coal)
png("plot4.png")
barplot(data, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Total US"~ PM[2.5] ~ "Coal Emissions by Year"), col="blue")
dev.off()
#subset all NEI obs. where NEI$SCC is in nums
coal <- subset(NEI, NEI$SCC %in% nums)
#sum emissions
data <- tapply(coal$Emissions, coal$year, sum)
png("plot4.png")
barplot(data/1000, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions in '000 tons)"),
main=expression("Total US"~ PM[2.5] ~ "Coal Emissions by Year"), col="blue")
dev.off()
str(SCC)
head(SCC)
png("plot4.png")
barplot(data, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Total US"~ PM[2.5] ~ "Coal Emissions by Year"), col="blue")
dev.off()
png("plot4.png")
barplot(data, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Total US"~ PM[2.5] ~ "Coal Emissions by Year"), col="blue")
dev.off()
head(NEI)
head(SCC)
nums
SCC$SCC
# Subsetting the data from Baltimore
baltimore<-subset(part_data,fips=="24510")
# Subsetting the SCC data including the words "Motor vehicle" in the short name into 'sub_car'
nums <- subset(SCC$SCC, grepl('Motor',SCC$Short.Name))
# subset all baltimore emissions, where SCC is in nums
motor <- subset(baltimore, baltimore$SCC %in% nums)
#sum up emissions data
data <- tapply(motor$Emissions, motor$year, sum)
png("plot5.png")
barplot(data, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Baltimore" ~ PM[2.5] ~ "Vehicle Emissions"), col="red")
dev.off()
# subset all baltimore emissions, where SCC is in nums
motor <- subset(baltimore, baltimore$SCC %in% nums)
#sum up emissions data
data <- tapply(motor$Emissions, motor$year, sum)
png("plot5.png")
barplot(data, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Baltimore" ~ PM[2.5] ~ "Motor Vehicle Emissions"), col="grey")
dev.off()
# Subsetting the data fOR Baltimore and LA
baltimore<-subset(part_data,fips=="24510")
LA <- subset(NEI, NEI$fips == "06037")
# Subsetting the SCC data including the words "Motor vehicle" in the short name into 'sub_car'
nums <- subset(SCC$SCC, grepl('Motor',SCC$Short.Name))
# subset all baltimore & LA emissions, where SCC is in nums
baltmotor <- subset(baltimore, baltimore$SCC %in% nums)
LAmotor <-subset(LA, LA$SCC %in% nums)
#sum up emissions data
baltdata <- tapply(baltmotor$Emissions, baltmotor$year, sum)
LAdata <- tapply(LAmotor$Emissions, LAmotor$year, sum)
# plot with 1-row, 2 cols
png("plot6.png")
par(mfrow = c(1,2))
barplot(baltdata, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Baltimore" ~ PM[2.5] ~ "Vehicle Emissions"), col="Yellow")
barplot(LAdata, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("LA" ~ PM[2.5] ~ "Vehicle Emissions"), col="orange"
dev.off()
# Subsetting the data fOR Baltimore and LA
baltimore<-subset(part_data,fips=="24510")
LA <- subset(NEI, NEI$fips == "06037")
# Subsetti
# Subsetting the data from Baltimore
baltimore <- subset(NEI, NEI$fips == "24510")
# Subsetting the SCC data including the words "Motor vehicle" in the short name into 'sub_car'
nums <- subset(SCC$SCC, grepl('Motor',SCC$Short.Name))
# subset all baltimore emissions, where SCC is in nums
motor <- subset(baltimore, baltimore$SCC %in% nums)
#sum up emissions data
data <- tapply(motor$Emissions, motor$year, sum)
png("plot5.png")
barplot(data, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Baltimore" ~ PM[2.5] ~ "Motor Vehicle Emissions"), col="grey")
dev.off()
# Subsetting the data fOR Baltimore and LA
baltimore <- subset(NEI, NEI$fips == "24510")
LA <- subset(NEI, NEI$fips == "06037")
# Subsetting the SCC data including the words "Motor vehicle" in the short name into 'sub_car'
nums <- subset(SCC$SCC, grepl('Motor',SCC$Short.Name))
# subset all baltimore & LA emissions, where SCC is in nums
baltmotor <- subset(baltimore, baltimore$SCC %in% nums)
LAmotor <-subset(LA, LA$SCC %in% nums)
#sum up emissions data
baltdata <- tapply(baltmotor$Emissions, baltmotor$year, sum)
LAdata <- tapply(LAmotor$Emissions, LAmotor$year, sum)
# plot with 1-row, 2 cols
png("plot6.png")
par(mfrow = c(1,2))
barplot(baltdata, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Baltimore" ~ PM[2.5] ~ "Vehicle Emissions"), col="Yellow")
barplot(LAdata, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("LA" ~ PM[2.5] ~ "Vehicle Emissions"), col="orange"
dev.off()
# plot with 1-row, 2 cols
png("plot6.png")
par(mfrow = c(1,2))
barplot(baltdata, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Baltimore" ~ PM[2.5] ~ "Vehicle Emissions"), col="Yellow")
barplot(LAdata, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Los Angelis" ~ PM[2.5] ~ "Vehicle Emissions"), col="orange"
dev.off()
# plot with 1-row, 2 cols
png("plot6.png")
par(mfrow = c(1,2))
barplot(baltdata, xlab = "Year", ylab=expression(~ PM[2.5] ~    "Emissions (tons)"),
main=expression("Baltimore" ~ PM[2.5] ~ "Vehicle Emissions"), col="Yellow")
barplot(LAdata, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Los Angelis" ~ PM[2.5] ~ "Vehicle Emissions"), col="orange")
dev.off()
png("plot6.png")
par(mfrow = c(1,2))
barplot(baltdata, xlab = "Year", ylab=expression(~ PM[2.5] ~    "Emissions (tons)"),
main=expression("Baltimore" ~ PM[2.5] ~ "Vehicle Emissions"), col="Yellow")
barplot(LAdata, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Los Angelis" ~ PM[2.5] ~ "Vehicle Emissions"), col="orange")
dev.off()
plot with 1-row, 2 cols
png("plot6.png", width=480, height=480)
par(mfrow = c(1,2))
barplot(baltdata, xlab = "Year", ylab=expression(~ PM[2.5] ~    "Emissions (tons)"),
main=expression("Baltimore" ~ PM[2.5] ~ "Vehicle Emissions"), col="Yellow")
barplot(LAdata, xlab = "Year", ylab=expression(~ PM[2.5] ~ "Emissions (tons)"),
main=expression("Los Angeles County" ~ PM[2.5] ~ "Vehicle Emissions"), col="orange")
dev.off()
